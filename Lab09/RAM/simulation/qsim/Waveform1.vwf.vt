// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/23/2018 17:34:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ram
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ram_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [9:0] Address;
reg Clock;
reg [31:0] DataIn;
reg WrEn;
// wires                                               
wire [31:0] DataOut;

// assign statements (if any)                          
ram i1 (
// port map - connection between master ports and signals/registers   
	.Address(Address),
	.Clock(Clock),
	.DataIn(DataIn),
	.DataOut(DataOut),
	.WrEn(WrEn)
);
initial 
begin 
#800000 $finish;
end 

// WrEn
initial
begin
	WrEn = 1'b0;
	WrEn = #210000 1'b1;
	WrEn = #30000 1'b0;
	WrEn = #70000 1'b1;
	WrEn = #30000 1'b0;
	WrEn = #30000 1'b1;
	WrEn = #80000 1'b0;
	WrEn = #210000 1'b1;
end 
// Address[ 9 ]
initial
begin
	Address[9] = 1'b1;
	Address[9] = #70000 1'b0;
	Address[9] = #290000 1'b1;
	Address[9] = #90000 1'b0;
end 
// Address[ 8 ]
initial
begin
	Address[8] = 1'b0;
	Address[8] = #100000 1'b1;
	Address[8] = #50000 1'b0;
	Address[8] = #210000 1'b1;
	Address[8] = #90000 1'b0;
end 
// Address[ 7 ]
initial
begin
	Address[7] = 1'b0;
	Address[7] = #250000 1'b1;
	Address[7] = #200000 1'b0;
	Address[7] = #110000 1'b1;
	Address[7] = #100000 1'b0;
	Address[7] = #80000 1'b1;
end 
// Address[ 6 ]
initial
begin
	Address[6] = 1'b0;
end 
// Address[ 5 ]
initial
begin
	Address[5] = 1'b0;
end 
// Address[ 4 ]
initial
begin
	Address[4] = 1'b0;
	Address[4] = #740000 1'b1;
end 
// Address[ 3 ]
initial
begin
	Address[3] = 1'b0;
end 
// Address[ 2 ]
initial
begin
	Address[2] = 1'b0;
	Address[2] = #660000 1'b1;
	Address[2] = #50000 1'b0;
end 
// Address[ 1 ]
initial
begin
	Address[1] = 1'b0;
end 
// Address[ 0 ]
initial
begin
	Address[0] = 1'b0;
	Address[0] = #360000 1'b1;
	Address[0] = #300000 1'b0;
end 

// Clock
initial
begin
	repeat(14)
	begin
		Clock = 1'b0;
		Clock = #25000 1'b1;
		# 25000;
	end
	Clock = 1'b0;
	Clock = #60000 1'b1;
	Clock = #10000 1'b0;
end 
// DataIn[ 31 ]
initial
begin
	DataIn[31] = 1'b0;
	DataIn[31] = #160000 1'b1;
	DataIn[31] = #110000 1'b0;
	DataIn[31] = #190000 1'b1;
	DataIn[31] = #200000 1'b0;
end 
// DataIn[ 30 ]
initial
begin
	DataIn[30] = 1'b0;
	DataIn[30] = #160000 1'b1;
	DataIn[30] = #110000 1'b0;
	DataIn[30] = #190000 1'b1;
	DataIn[30] = #200000 1'b0;
end 
// DataIn[ 29 ]
initial
begin
	DataIn[29] = 1'b0;
	DataIn[29] = #270000 1'b1;
	DataIn[29] = #90000 1'b0;
end 
// DataIn[ 28 ]
initial
begin
	DataIn[28] = 1'b0;
	DataIn[28] = #160000 1'b1;
	DataIn[28] = #110000 1'b0;
	DataIn[28] = #190000 1'b1;
	DataIn[28] = #250000 1'b0;
end 
// DataIn[ 27 ]
initial
begin
	DataIn[27] = 1'b0;
	DataIn[27] = #660000 1'b1;
end 
// DataIn[ 26 ]
initial
begin
	DataIn[26] = 1'b0;
	DataIn[26] = #160000 1'b1;
	DataIn[26] = #200000 1'b0;
	DataIn[26] = #100000 1'b1;
	DataIn[26] = #200000 1'b0;
	DataIn[26] = #50000 1'b1;
end 
// DataIn[ 25 ]
initial
begin
	DataIn[25] = 1'b0;
end 
// DataIn[ 24 ]
initial
begin
	DataIn[24] = 1'b0;
	DataIn[24] = #660000 1'b1;
end 
// DataIn[ 23 ]
initial
begin
	DataIn[23] = 1'b0;
	DataIn[23] = #270000 1'b1;
	DataIn[23] = #90000 1'b0;
end 
// DataIn[ 22 ]
initial
begin
	DataIn[22] = 1'b0;
	DataIn[22] = #660000 1'b1;
	DataIn[22] = #50000 1'b0;
end 
// DataIn[ 21 ]
initial
begin
	DataIn[21] = 1'b0;
	DataIn[21] = #160000 1'b1;
	DataIn[21] = #110000 1'b0;
	DataIn[21] = #190000 1'b1;
	DataIn[21] = #200000 1'b0;
	DataIn[21] = #50000 1'b1;
end 
// DataIn[ 20 ]
initial
begin
	DataIn[20] = 1'b0;
	DataIn[20] = #270000 1'b1;
	DataIn[20] = #90000 1'b0;
	DataIn[20] = #350000 1'b1;
end 
// DataIn[ 19 ]
initial
begin
	DataIn[19] = 1'b0;
	DataIn[19] = #160000 1'b1;
	DataIn[19] = #110000 1'b0;
	DataIn[19] = #190000 1'b1;
end 
// DataIn[ 18 ]
initial
begin
	DataIn[18] = 1'b0;
	DataIn[18] = #160000 1'b1;
	DataIn[18] = #200000 1'b0;
	DataIn[18] = #100000 1'b1;
	DataIn[18] = #200000 1'b0;
	DataIn[18] = #50000 1'b1;
end 
// DataIn[ 17 ]
initial
begin
	DataIn[17] = 1'b0;
	DataIn[17] = #160000 1'b1;
	DataIn[17] = #200000 1'b0;
	DataIn[17] = #100000 1'b1;
end 
// DataIn[ 16 ]
initial
begin
	DataIn[16] = 1'b0;
	DataIn[16] = #160000 1'b1;
	DataIn[16] = #200000 1'b0;
	DataIn[16] = #100000 1'b1;
	DataIn[16] = #200000 1'b0;
end 
// DataIn[ 15 ]
initial
begin
	DataIn[15] = 1'b0;
	DataIn[15] = #660000 1'b1;
end 
// DataIn[ 14 ]
initial
begin
	DataIn[14] = 1'b0;
	DataIn[14] = #160000 1'b1;
	DataIn[14] = #110000 1'b0;
	DataIn[14] = #190000 1'b1;
	DataIn[14] = #200000 1'b0;
	DataIn[14] = #50000 1'b1;
end 
// DataIn[ 13 ]
initial
begin
	DataIn[13] = 1'b0;
	DataIn[13] = #710000 1'b1;
end 
// DataIn[ 12 ]
initial
begin
	DataIn[12] = 1'b0;
end 
// DataIn[ 11 ]
initial
begin
	DataIn[11] = 1'b0;
	DataIn[11] = #270000 1'b1;
	DataIn[11] = #90000 1'b0;
	DataIn[11] = #350000 1'b1;
end 
// DataIn[ 10 ]
initial
begin
	DataIn[10] = 1'b0;
	DataIn[10] = #710000 1'b1;
end 
// DataIn[ 9 ]
initial
begin
	DataIn[9] = 1'b0;
	DataIn[9] = #270000 1'b1;
	DataIn[9] = #90000 1'b0;
end 
// DataIn[ 8 ]
initial
begin
	DataIn[8] = 1'b0;
end 
// DataIn[ 7 ]
initial
begin
	DataIn[7] = 1'b0;
	DataIn[7] = #160000 1'b1;
	DataIn[7] = #200000 1'b0;
	DataIn[7] = #100000 1'b1;
end 
// DataIn[ 6 ]
initial
begin
	DataIn[6] = 1'b0;
	DataIn[6] = #270000 1'b1;
	DataIn[6] = #90000 1'b0;
	DataIn[6] = #300000 1'b1;
end 
// DataIn[ 5 ]
initial
begin
	DataIn[5] = 1'b0;
	DataIn[5] = #160000 1'b1;
	DataIn[5] = #110000 1'b0;
	DataIn[5] = #190000 1'b1;
	DataIn[5] = #200000 1'b0;
	DataIn[5] = #50000 1'b1;
end 
// DataIn[ 4 ]
initial
begin
	DataIn[4] = 1'b0;
	DataIn[4] = #160000 1'b1;
	DataIn[4] = #200000 1'b0;
	DataIn[4] = #100000 1'b1;
	DataIn[4] = #200000 1'b0;
end 
// DataIn[ 3 ]
initial
begin
	DataIn[3] = 1'b0;
	DataIn[3] = #160000 1'b1;
	DataIn[3] = #110000 1'b0;
	DataIn[3] = #190000 1'b1;
	DataIn[3] = #200000 1'b0;
end 
// DataIn[ 2 ]
initial
begin
	DataIn[2] = 1'b0;
	DataIn[2] = #160000 1'b1;
	DataIn[2] = #110000 1'b0;
	DataIn[2] = #190000 1'b1;
end 
// DataIn[ 1 ]
initial
begin
	DataIn[1] = 1'b0;
	DataIn[1] = #360000 1'b1;
	DataIn[1] = #100000 1'b0;
end 
// DataIn[ 0 ]
initial
begin
	DataIn[0] = 1'b0;
	DataIn[0] = #160000 1'b1;
	DataIn[0] = #110000 1'b0;
	DataIn[0] = #90000 1'b1;
end 
endmodule

