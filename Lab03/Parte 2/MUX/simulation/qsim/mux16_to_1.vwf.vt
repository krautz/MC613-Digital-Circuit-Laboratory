// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2018 13:39:49"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux16_to_1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux16_to_1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] data;
reg [3:0] sel;
// wires                                               
wire output;

// assign statements (if any)                          
mux16_to_1 i1 (
// port map - connection between master ports and signals/registers   
	.data(data),
	.\output (output),
	.sel(sel)
);
initial 
begin 
#800000 $finish;
end 
// data[ 15 ]
initial
begin
	data[15] = 1'b1;
	data[15] = #400000 1'b0;
end 
// data[ 14 ]
initial
begin
	data[14] = 1'b1;
	data[14] = #200000 1'b0;
	data[14] = #200000 1'b1;
	data[14] = #200000 1'b0;
end 
// data[ 13 ]
initial
begin
	data[13] = 1'b1;
	# 100000;
	repeat(3)
	begin
		data[13] = 1'b0;
		data[13] = #100000 1'b1;
		# 100000;
	end
	data[13] = 1'b0;
end 
// data[ 12 ]
initial
begin
	data[12] = 1'b1;
	# 50000;
	repeat(7)
	begin
		data[12] = 1'b0;
		data[12] = #50000 1'b1;
		# 50000;
	end
	data[12] = 1'b0;
end 
// data[ 11 ]
initial
begin
	data[11] = 1'b1;
	# 25000;
	repeat(15)
	begin
		data[11] = 1'b0;
		data[11] = #25000 1'b1;
		# 25000;
	end
	data[11] = 1'b0;
end 
// data[ 10 ]
always
begin
	data[10] = 1'b0;
	data[10] = #12500 1'b1;
	#12500;
end 
// data[ 9 ]
always
begin
	data[9] = 1'b0;
	data[9] = #6250 1'b1;
	#6250;
end 
// data[ 8 ]
always
begin
	data[8] = 1'b0;
	data[8] = #3125 1'b1;
	#3125;
end 
// data[ 7 ]
initial
begin
	repeat(256)
	begin
		data[7] = 1'b0;
		data[7] = #1562 1'b1;
		# 1562;
	end
	data[7] = 1'b0;
end 
// data[ 6 ]
initial
begin
	repeat(512)
	begin
		data[6] = 1'b0;
		data[6] = #780 1'b1;
		# 780;
	end
	data[6] = 1'b0;
	data[6] = #780 1'b1;
end 
// data[ 5 ]
initial
begin
	repeat(512)
	begin
		data[5] = 1'b0;
		data[5] = #781 1'b1;
		# 781;
	end
	data[5] = 1'b0;
end 
// data[ 4 ]
initial
begin
	repeat(1025)
	begin
		data[4] = 1'b0;
		data[4] = #390 1'b1;
		# 390;
	end
	data[4] = 1'b0;
	data[4] = #390 1'b1;
end 
// data[ 3 ]
initial
begin
	repeat(2051)
	begin
		data[3] = 1'b0;
		data[3] = #195 1'b1;
		# 195;
	end
	data[3] = 1'b0;
end 
// data[ 2 ]
initial
begin
	repeat(4123)
	begin
		data[2] = 1'b0;
		data[2] = #97 1'b1;
		# 97;
	end
	data[2] = 1'b0;
	data[2] = #97 1'b1;
end 
// data[ 1 ]
initial
begin
	repeat(8333)
	begin
		data[1] = 1'b0;
		data[1] = #48 1'b1;
		# 48;
	end
	data[1] = 1'b0;
end 
// data[ 0 ]
initial
begin
	repeat(16666)
	begin
		data[0] = 1'b0;
		data[0] = #24 1'b1;
		# 24;
	end
	data[0] = 1'b0;
	data[0] = #24 1'b1;
end 
// sel[ 3 ]
initial
begin
	repeat(33333)
	begin
		sel[3] = 1'b0;
		sel[3] = #12 1'b1;
		# 12;
	end
	sel[3] = 1'b0;
end 
// sel[ 2 ]
initial
begin
	repeat(66666)
	begin
		sel[2] = 1'b0;
		sel[2] = #6 1'b1;
		# 6;
	end
	sel[2] = 1'b0;
	sel[2] = #6 1'b1;
end 
// sel[ 1 ]
initial
begin
	repeat(133333)
	begin
		sel[1] = 1'b0;
		sel[1] = #3 1'b1;
		# 3;
	end
	sel[1] = 1'b0;
end 
// sel[ 0 ]
always
begin
	sel[0] = 1'b0;
	sel[0] = #1 1'b1;
	#1;
end 
endmodule

