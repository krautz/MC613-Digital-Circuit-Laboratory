// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2018 14:03:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          dec2_to_4
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module dec2_to_4_vlg_vec_tst();
// constants                                           
// general purpose registers
reg en;
reg w0;
reg w1;
// wires                                               
wire y0;
wire y1;
wire y2;
wire y3;

// assign statements (if any)                          
dec2_to_4 i1 (
// port map - connection between master ports and signals/registers   
	.en(en),
	.w0(w0),
	.w1(w1),
	.y0(y0),
	.y1(y1),
	.y2(y2),
	.y3(y3)
);
initial 
begin 
#800000 $finish;
end 

// en
always
begin
	en = 1'b0;
	en = #400000 1'b1;
	#400000;
end 

// w0
always
begin
	w0 = 1'b0;
	w0 = #200000 1'b1;
	#200000;
end 

// w1
always
begin
	w1 = 1'b0;
	w1 = #100000 1'b1;
	#100000;
end 
endmodule

