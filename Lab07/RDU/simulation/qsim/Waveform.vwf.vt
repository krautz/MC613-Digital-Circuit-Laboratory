// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/09/2018 16:58:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          shift_register
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module shift_register_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [1:0] mode;
reg [5:0] par_in;
reg ser_in;
// wires                                               
wire [5:0] par_out;

// assign statements (if any)                          
shift_register i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.mode(mode),
	.par_in(par_in),
	.par_out(par_out),
	.ser_in(ser_in)
);
initial 
begin 
#800000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #50000 1'b1;
	#50000;
end 
// par_in[ 5 ]
initial
begin
	par_in[5] = 1'b0;
	par_in[5] = #430000 1'b1;
	par_in[5] = #50000 1'b0;
end 
// par_in[ 4 ]
initial
begin
	par_in[4] = 1'b0;
	par_in[4] = #230000 1'b1;
	par_in[4] = #60000 1'b0;
	par_in[4] = #240000 1'b1;
	par_in[4] = #50000 1'b0;
end 
// par_in[ 3 ]
initial
begin
	par_in[3] = 1'b0;
	par_in[3] = #30000 1'b1;
	par_in[3] = #30000 1'b0;
	par_in[3] = #170000 1'b1;
	par_in[3] = #60000 1'b0;
	par_in[3] = #140000 1'b1;
	par_in[3] = #50000 1'b0;
	par_in[3] = #50000 1'b1;
	par_in[3] = #50000 1'b0;
	par_in[3] = #50000 1'b1;
	par_in[3] = #50000 1'b0;
end 
// par_in[ 2 ]
initial
begin
	par_in[2] = 1'b0;
	par_in[2] = #30000 1'b1;
	par_in[2] = #30000 1'b0;
	par_in[2] = #170000 1'b1;
	par_in[2] = #60000 1'b0;
	par_in[2] = #240000 1'b1;
	par_in[2] = #50000 1'b0;
end 
// par_in[ 1 ]
initial
begin
	par_in[1] = 1'b0;
	par_in[1] = #430000 1'b1;
	par_in[1] = #50000 1'b0;
end 
// par_in[ 0 ]
initial
begin
	par_in[0] = 1'b0;
end 

// ser_in
initial
begin
	ser_in = 1'b1;
	ser_in = #100000 1'b0;
	ser_in = #40000 1'b1;
	ser_in = #40000 1'b0;
	ser_in = #160000 1'b1;
	ser_in = #40000 1'b0;
	ser_in = #140000 1'b1;
	ser_in = #60000 1'b0;
	ser_in = #60000 1'b1;
	ser_in = #30000 1'b0;
	ser_in = #60000 1'b1;
	ser_in = #40000 1'b0;
end 
// mode[ 1 ]
initial
begin
	mode[1] = 1'b0;
	mode[1] = #410000 1'b1;
end 
// mode[ 0 ]
initial
begin
	mode[0] = 1'b1;
	mode[0] = #200000 1'b0;
	mode[0] = #210000 1'b1;
	mode[0] = #190000 1'b0;
end 
endmodule

