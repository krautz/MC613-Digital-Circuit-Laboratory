ESTRUTURAS PARA USAR:

WITH SELECT :

	WITH s SELECT
		y1 <= x1 WHEN '0',
			  x2 WHEN '1';

-------------------------------------------------------------------------
			  
WHEN ELSE:

y1 <= x1 WHEN s = '0' ELSE x2;

-------------------------------------------------------------------------

PROCESS:

PROCESS (x1, x2, s)
	BEGIN
		IF s = '0' THEN
		y1 <= x1;
		y2 <= x2;
		ELSE
		y1 <= x2;
		y2 <= x1;
		END IF;
		
		G1: FOR i IN 0 TO N-1 loop
			xbar: xbar_v1 PORT MAP
				(C(i), C(n + i + 1), s(i), C(i+1), C(n + i + 2));
		END loop;
	END PROCESS;
	
-------------------------------------------------------------------------

SINAL:
Para salvar um valor de um sinal logico intermediario precisa declarar a estrutura abaixo entre architeture e begin

signal a, b, c, d, e, g, h, i, j, k, l : STD_LOGIC;
ou
signal a : STD_LOGIC_VECTOR (N downto 0);

-------------------------------------------------------------------------
	
COMPONENTE:
Estanciar entre a arquitetura e o begin
basta copiar a declaracao do vhd do componente desejado trocando algumas
poucas palavras

COMPONENT xbar_v1
	GENERIC (n : integer);
	PORT (x1, x2, s: IN 		STD_LOGIC;
			y1, y2: OUT			STD_LOGIC
	);
	END COMPONENT;
	
A chamada do componente dentro do begin deve seguir dentro de um rotulo, da seguinte maneira:

xbar: xbar_v1
	GENERIC MAP (n => 5) 
	PORT MAP (C(i), C(n + i + 1), s(i), C(i+1), C(n + i + 2));
	
OBS: O GENERIC N EH OBRIGADO
	
-------------------------------------------------------------------------

GENERATE (FOR)
Para fazer o uso de for, esse deve estar dentro de um rotulo, com Generate e seguindo a seguinte sintaxe

	G1: FOR i IN 0 TO N-1 GENERATE
	xbar: xbar_v1 PORT MAP
			(C(i), C(n + i + 1), s(i), C(i+1), C(n + i + 2));
	END GENERATE;

-------------------------------------------------------------------------


